<?php

namespace Drupal\entity_tools_example\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\entity_tools\NodeQuery;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\entity_tools\EntityTools;

/**
 * Class EntityExampleController.
 */
class EntityExampleController extends ControllerBase {

  /**
   * Drupal\entity_tools\EntityTools definition.
   *
   * @var \Drupal\entity_tools\EntityTools
   */
  protected $entityTools;

  /**
   * Constructs a new EntityExampleController object.
   */
  public function __construct(EntityTools $entity_tools) {
    $this->entityTools = $entity_tools;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('entity_tools')
    );
  }

  /**
   * Returns a list of node teasers.
   *
   * @return array
   *   Render array of the node list example.
   */
  private function nodeListExample() {
    // Optional query.
    $query = new NodeQuery();
    // $query->limit(3) is equivalent to
    // $query->coreEntityQuery->range(0,3);
    // So the core entityQuery can still be fully used as a complement
    // or replacement of the provided methods.
    $query->limit(3);

    // Order by creation date DESC.
    $query->latestFirst();

    // Select and load nodes from a single content type.
    // $nodes = $this->entityTools->getNodes('article', $query);
    // Select and load nodes from multiple content types.
    $query->setTypes(['article', 'page']);
    $nodes = $this->entityTools->getNodes(NULL, $query);

    // Display a list without a title that defaults to the teaser view mode.
    $build = $this->entityTools->entitiesListDisplay($nodes);
    // The same list with a title
    // $build = $this->entityTools->entitiesListDisplay
    // ($nodes, 'teaser', ['title' => t('Node list')]);.
    return $build;
  }

  /**
   * Returns a list of terms.
   *
   * @return array
   *   Render array of the term list example.
   */
  private function termListExample() {
    $build = [];

    // Select and load terms from a single vocabulary.
    $terms = $this->entityTools->getTerms('tags');
    if (!empty($terms)) {
      // Display a list of terms that defaults to the teaser view mode.
      $build = $this->entityTools->entitiesListDisplay($terms);
    }

    // Select and load terms from multiple vocabularies.
    // $query = new TermQuery();
    // $query->setTypes(['tags', 'other_vocabulary']);
    // $terms = $this->entityTools->getTerms(NULL, $query);
    // $build = $this->entityTools->entitiesListDisplay($terms);
    return $build;
  }

  /**
   * Returns a list of users.
   *
   * @return array
   *   Render array of the user list example.
   */
  private function userListExample() {
    // Select and load for a role
    // $users = $this->entityTools->getUsers('administrator');
    // $build = $this->entityTools->entitiesListDisplay($users);
    // Select and load for a permission.
    // @todo move into the Role entity methods and query
    $users = $this->entityTools->getUsersByPermission('access content');
    $build = $this->entityTools->entitiesListDisplay($users);

    // Select and load users from multiple roles.
    // @todo add example

    return $build;
  }

  /**
   * Returns blocks examples.
   *
   * @return array
   *   Render array of the blocks example.
   */
  private function blocksExample() {
    $build = [];
    // Block.
    // @todo check current theme
    // $build['block'] = $this->entityTools->blockDisplay('bartik_main_menu');
    // Block Plugin.
    $build['et_block_plugin'] = $this->entityTools->blockPluginDisplay('system_breadcrumb_block');

    // A Block Plugin with a deriver
    // $build['et_block_plugin_2'] = $this->entityTools->blockPluginDisplay('mailchimp_signup_subscribe_block:mailchimp_test');
    // This is equivalent to
    // $blockManager = \Drupal::service('plugin.manager.block');
    // $build['et_block_plugin'] = $blockManager->createInstance('mailchimp_signup_subscribe_block:mailchimp_test')->build();
    // @todo block content example generated by the module
    // $build['et_block_content'] = $this->entityTools->blockContentDisplay(1);.
    return $build;
  }

  /**
   * Returns paragraphs examples.
   *
   * @return array
   *   Render array of the paragraphs example.
   */
  private function paragraphsExample() {
    $build = [];
    // Load the host entity, here a node.
    // $node = $this->entityTools->nodeLoad(42);
    // Display a list of paragraphs
    // $build['et_paragraphs_list'] =
    // $this->entityTools->entityParagraphsListDisplay
    // ($node, 'field_project_meta');
    // Or just fetch the paragraphs to render them via a custom template
    // $paragraphs = $this->entityTools->entityParagraphsLoad
    // ($node, 'field_project_meta');.
    return $build;
  }

  /**
   * Index.
   *
   * @return string
   *   Return list of examples.
   */
  public function index() {

    $build['et_node_list'] = $this->nodeListExample();
    $build['et_term_list'] = $this->termListExample();
    $build['et_user_list'] = $this->userListExample();
    $build['et_blocks'] = $this->blocksExample();

    // @todo paragraphs example
    $build['et_paragraphs'] = $this->paragraphsExample();

    // @todo add example of other service usages
    // Select ids only
    // Then load them
    // Then display them
    return $build;
  }

}
